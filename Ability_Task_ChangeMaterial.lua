---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ecoliwu.
--- DateTime: 2024/7/16 21:38
---
local SPAbility = require("Feature.StarP.Script.System.Ability.SPAbilityClasses")
local SPAbilityUtils = require("Feature.StarP.Script.System.Ability.SPAbilityUtils")
local SPLuaUtility = require("Feature.StarP.Script.System.SPLuaUtility")
local IsValid = UE4.UKismetSystemLibrary.IsValid
local Ability_Task_ChangeMaterial = UE4.Class(nil, "Ability_Task_ChangeMaterial")

local ESPMaterialType = _SP.SPAbilityUtils.ESPMaterialType

local function Log(...)
    _SP.Log("SPAbility", "[Ability_Task_ChangeMaterial]", ...)
end

function Ability_Task_ChangeMaterial:OnTaskStartBP(Context)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    local Target = self:GetSingleActorFromTargetTypeBP(Context, UE4.EAbleAbilityTargetType.ATT_Self)
    if not Target then
        return
    end
    local actorMesh = Target:GetComponentByClass(UE4.USkeletalMeshComponent:StaticClass())
    if actorMesh == nil or not actorMesh:IsA(UE4.USkeletalMeshComponent.StaticClass()) then
        return
    end
    if self.MaterialElementIndex >= 0 and self.Material then
        if self.bRecover then
            local material = actorMesh:GetMaterial(self.MaterialElementIndex)
            if material then
                ScratchPad.CacheMaterialInstance = material
            end
        end
        -- modify Material
        local dyMat = UE4.UKismetMaterialLibrary.CreateDynamicMaterialInstance(_SP.GetCurrentWorld(), self.Material)
        if dyMat then
            -- actorMesh:CreateDynamicMaterialInstance(self.MaterialElementIndex, self.Material)
            actorMesh:SetMaterial(self.MaterialElementIndex, dyMat)
        end
    end
    ScratchPad.MatInstance = actorMesh:GetMaterial(self.MaterialElementIndex)
    --modify Material Params
    if self.bRecoverMaterialParams and self.MaterialElementIndex >= 0 then
        -- record origin params in ScratchPad

        --确保需要修改参数的材质都是UMaterialInstanceDynamic
        local mat = actorMesh:GetMaterial(self.MaterialElementIndex)
        if (mat == nil ) or (not _SP.IsValid(mat)) then
            return
        end
        if not mat:Cast(UE4.UMaterialInstanceDynamic) then
            mat = actorMesh:CreateAndSetMaterialInstanceDynamic(self.MaterialElementIndex)
            ScratchPad.MatInstance = mat
        end

        local param, paramName, valueType
        for i = 1, self.ChangeMaterialParams:Length() do
            param = self.ChangeMaterialParams:Get(i)
            paramName = param.ParamName
            valueType = param.Type
            if paramName and paramName ~= "" then
                ScratchPad.CacheMaterialParams[paramName] = {
                    type = valueType,
                    value = self:GetMaterialParamByType(mat, paramName, valueType)
                }
            end
        end
    end
end

function Ability_Task_ChangeMaterial:OnTaskTickBP(Context, DeltaTime)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    ScratchPad.ElapsedTime = ScratchPad.ElapsedTime + DeltaTime
    -- Tick Modify Material Param
    local paramName, param
    local curve, curveType
    for i = 1, self.ChangeMaterialParams:Length() do
        param = self.ChangeMaterialParams:GetRef(i)
        curve = param.Curve
        curveType = param.Type
        if curve then
            local value = self:GetCurrentCurveValue(ScratchPad.ElapsedTime, curve, curveType)
            if value then
                paramName = param.ParamName
                if paramName and paramName ~= "" then
                    -- ScratchPad.MatInstance:SetScalarParameterValue(paramName, value)
                    self:SetMaterialParamByType(ScratchPad.MatInstance, paramName, value, curveType)
                end
            else
                Log("value nil")
            end
        end
    end
end

function Ability_Task_ChangeMaterial:GetMaterialParamByType(mat, paramName, type)
    if not _SP.IsValid(mat) then
        return
    end
    if type == ESPMaterialType.Float then
        if mat.K2_GetScalarParameterValue then
            return mat:K2_GetScalarParameterValue(paramName)
        end
    elseif type == ESPMaterialType.LinearColor then
        if mat.K2_GetVectorParameterValue then
            return mat:K2_GetVectorParameterValue(paramName)
        end
    end
end

function Ability_Task_ChangeMaterial:SetMaterialParamByType(mat, paramName, value, modifyType)
    if not _SP.IsValid(mat) then
        Log("mat nil")
        return
    end
    if modifyType == ESPMaterialType.Float and type(value) == "number" then
        if mat.SetScalarParameterValue then
            if value >= -0.00001 and value <= 0.00001 then
                value = 0
            end
            mat:SetScalarParameterValue(paramName, value)
        end
    elseif modifyType == ESPMaterialType.LinearColor then
        if mat.SetVectorParameterValue then
            mat:SetVectorParameterValue(paramName, value)
        end
    end
end

function Ability_Task_ChangeMaterial:GetCurrentCurveValue(currentTime, curve, type)
    local DurationTime = self:GetDuration()
    local Progress = DurationTime > 0 and (currentTime / DurationTime) or 0
    if type == ESPMaterialType.Float and curve:IsA(UE4.UCurveFloat.StaticClass()) then
        return curve:GetFloatValue(Progress)
    elseif type == ESPMaterialType.LinearColor and curve:IsA(UE4.UCurveLinearColor.StaticClass()) then
        return curve:GetLinearColorValue(Progress)
    end
end

function Ability_Task_ChangeMaterial:OnTaskEndBP(Context)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    local Target = self:GetSingleActorFromTargetTypeBP(Context, UE4.EAbleAbilityTargetType.ATT_Self)
    if not Target then
        return
    end
    local actorMesh = Target.Mesh
    if actorMesh == nil or not actorMesh:IsA(UE4.USkeletalMeshComponent.StaticClass()) then
        return
    end
    if self.bRecover then
        if ScratchPad.CacheMaterialInstance then
            actorMesh:SetMaterial(self.MaterialElementIndex, ScratchPad.CacheMaterialInstance)
            ScratchPad.CacheMaterialInstance = nil
        end
    end
    if self.bRecoverMaterialParams and ScratchPad.CacheMaterialParams then
        local mat = actorMesh:GetMaterial(self.MaterialElementIndex)
        local value, valueType
        for paramName, param in pairs(ScratchPad.CacheMaterialParams) do
            value = param.value
            valueType = param.type
            -- mat:SetScalarParameterValue(paramName, value)
            self:SetMaterialParamByType(mat, paramName, value, valueType)
        end
    end

    ScratchPad.MatInstance = nil
end

function Ability_Task_ChangeMaterial:ResetScratchPadBP(ScratchPad)
    if ScratchPad then
        ScratchPad.CacheMaterialInstance = nil
        ScratchPad.MatInstance = nil
        ScratchPad.CacheMaterialParams = {}
        ScratchPad.ElapsedTime = 0
    end
end

function Ability_Task_ChangeMaterial:IsSingleFrameBP()
    return false
end

return Ability_Task_ChangeMaterial